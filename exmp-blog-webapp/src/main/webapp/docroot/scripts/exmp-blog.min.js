if (typeof exmp === "undefined") {
    var exmp = {}
}
if (typeof exmp.blog === "undefined") {
    exmp.blog = {}
}
if (typeof exmp.blog.core === "undefined") {
    exmp.blog.core = {}
}
if (typeof exmp.blog.functor === "undefined") {
    exmp.blog.functor = {}
}
if (typeof exmp.blog.functor.dhtml  === "undefined") {
    exmp.blog.functor.dhtml = {}
}
if (typeof exmp.blog.functor.event  === "undefined") {
    exmp.blog.functor.event = {}
}
if (typeof exmp.blog.functor.htmltag  === "undefined") {
    exmp.blog.functor.htmltag = {}
}
if (typeof exmp.blog.functor.request  === "undefined") {
    exmp.blog.functor.request = {}
}
if (typeof exmp.blog.functor.value  === "undefined") {
    exmp.blog.functor.value = {}
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * an entry class of the application.
 * 
 * @author hiroxpepe
 */
exmp.blog.core.Application = function(sender) {
    $(document).ready(function() {
        sender.init();
    })
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a controller class of the application.
 * 
 * @author hiroxpepe
 */
exmp.blog.core.Controller = window; {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    /**
     * the initialization method of the Controller class.
     * this method should be called.
     */
    exmp.blog.core.Controller.init = function() {
        
        var controller = exmp.blog.core.Controller;
        
        controller._initializeComponent();
    }
    
    ///////////////////////////////////////////////////////////////////////////
    // event handler methods
    
    /**
     * an event handler that called when 
     * the button of post is clicked.
     */
    exmp.blog.core.Controller._postButtonOnClick = function() {
        
        var entryPostClosure = exmp.blog.functor.request.EntryPostClosure;
        var entryFactory = exmp.blog.functor.value.EntryFactory;
        
        entryPostClosure.execute(
            entryFactory.create()
        );
    }
    
    /**
     * an event handler that called when 
     * the button of setting is clicked.
     */
    exmp.blog.core.Controller._settingButtonOnClick = function() {
        
        var settingClosure = exmp.blog.functor.request.SettingClosure;
        var entryFactory = exmp.blog.functor.value.EntryFactory;
        
        settingClosure.execute(
            entryFactory.create()
        );
    }
    
    /**
     * an event handler that called when 
     * the div of message close is clicked.
     */
    exmp.blog.core.Controller._messageDivOnClick = function() {
        $("#message-block")
            .removeClass("show")
            .css({
                margin: "0",
                padding: "0",
                border: "none"
            })
            .html("");
    }
    
    /**
     * an event handler that called when
     * the div of entry tirle is clicked.
     */
    exmp.blog.core.Controller._entryContentTitleDivOnClick = function() {
        $("div.container")
            .toggleClass(
                "wide", 300
            );
    }
    
    ///////////////////////////////////////////////////////////////////////////
    // private methods
    
    /**
     * initializes a div of the tabs area.
     */
    exmp.blog.core.Controller._initializeTabsDiv = function() {
        $("div.tab-content div.tab").hide();
        $("div.tab-content div.tab:first").show();
        $("div.tab-content ul li:first").addClass("active");
        $("div.tab-content ul li a").click(function(){
            $("div.tab-content ul li").removeClass("active");
            $(this).parent().addClass("active");
            var currentTab = $(this).attr("href");
            $("div.tab-content div.tab").hide();
            $(currentTab).show();
            return false;
        });
    }
    
    /**
     * initializes a div of entry list.
     * a HTTP request of Ajax for get the entry data.
     */
    exmp.blog.core.Controller._initializeEntryListDiv = function() {
        
        var profileUpdateClosure = exmp.blog.functor.dhtml.ProfileUpdateClosure;
        var entryListClosure = exmp.blog.functor.request.EntryListClosure;
        var entryFactory = exmp.blog.functor.value.EntryFactory;
        var pageUrl = location.href;
        
        profileUpdateClosure.execute({
            username: $("#entry_username").val(),
            email: $("#entry_email").val()
        });
        
        if (!(pageUrl.indexOf("entry/form.html") == -1)) {
            entryListClosure.execute(
                entryFactory.create()
            );
        }
    }
    
    /**
     * initializes a category select of form.
     * TODO: a HTTP request of Ajax for get the data.. ? 
     */
    exmp.blog.core.Controller._initializeCategorySelect = function() {
        $("#entry-category").append($('<option value="General">General</option>'));
        $("#entry-category").append($('<option value="Technology">Technology</option>'));
        $("#entry-category").append($('<option value="Language">Language</option>'));
        $("#entry-category").append($('<option value="Music">Music</option>'));
        $("#entry-category").append($('<option value="Status">Status</option>'));
        $("#entry-category").val("General");
    }
    
    /**
     * initialize a component of the view class.
     */
    exmp.blog.core.Controller._initializeComponent = function() {
        
        var controller = exmp.blog.core.Controller;
        
        // calls for the initialization methods.
        
        controller._initializeEntryListDiv();
        
        controller._initializeTabsDiv();
        
        controller._initializeCategorySelect();
        
        // set the control's event handler.
        
        $("#post-button").click(function() {
            controller._postButtonOnClick();
        });
        
        $("#setting-button").click(function() {
            controller._settingButtonOnClick();
        });
        
        $("#message-block").click(function() {
            controller._messageDivOnClick();
        });
        
        $("h4.entry-content-title").click(function() {
            controller._entryContentTitleDivOnClick();
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the HTML table of the entry list.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.dhtml.EntryListUpdateClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var transformer = exmp.blog.functor.htmltag.EntryListTransformer;
        
        $("#entry-list-block").html(
            transformer.transform(
                obj
            )
        );
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * display a message to div when the command is error.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.dhtml.ErrorMessageClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        // update the html element and the css style.
        $("#message-block")
            .addClass(
                "show"
            )
            .css({
                margin: "1em 0.25em 1em 0.25em",
                padding: "0.25em",
                color: "red",
                backgroundColor: "pink",
                border: "1px solid red"
            })
            .html(
                '<img id="message_close_img" ' +
                    'src="../docroot/images/close.png" ' +
                    'width="16" height="16" />' +
                "<p>" + obj.message + "</p>"
            );
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * display an icon image when an ajax http request of
 * to get the entry list is waiting.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.dhtml.ListWaitingClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        // update the html element.
        $("#entry-list-block")
            .html(
                "<p>" + 
                    '<img src="../docroot/images/loading.gif" ' +
                        'width="31" height="31" alt="now loading..." />' +
                "</p>"
            );
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * update the html of the profile.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.dhtml.ProfileUpdateClosure  = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        var username = obj.username;
        var email = obj.email;
        var hash = 0;
        if (email) {
            hash = MD5_hexhash(email);
        }
        $("#user-profile").html(               
            "<table>" +
                "<tr>" +
                    "<td>" +
                        "<img src='http://2.gravatar.com/avatar/" +
                            hash + "' width='48' height='48' border='0'>" +
                    "</td>" +
                    "<td>" +
                        "<div class='profileName'><b>" + username + "</b></div>" +
                    "</td>" +
                "</tr>" +
            "</table>"
        );
    }
}
/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * display a message to div when the command is success.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.dhtml.SuccessMessageClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        // update the html element and the css style.
        $("#message-block")
            .addClass(
                "show"
            )  
            .css({
                margin: "1em 0.25em 1em 0.25em",
                padding: "0.25em",
                color: "green",
                backgroundColor: "palegreen",
                border: "1px solid green"
            })
            .html(
                '<img id="message_close_img" ' +
                    'src="../docroot/images/close.png" ' +
                    'width="16" height="16" />' +
                "<p>" + obj.message + "</p>"
            );
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * display a message to div when an ajax http request command waiting.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.dhtml.WaitingMessageClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        // update the html element and the css style.
        $("#message-block")
            .addClass(
                "show"
            )
            .css({
                margin: "1em 0.25em 1em 0.25em",
                padding: "0.25em",
                color: "silver",
                backgroundColor: "lavender",
                border: "1px solid silver"
            })
            .html(
                '<p><img src="../docroot/images/loading.gif" ' +
                    'width="31" height="31" /></p>' + 
                "<p>" + obj.message + "</p>"
            );
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of entry delete action.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.event.DeleteEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.blog.functor.event.DeleteEventClosure#execute");
        
        var deleteClosure = exmp.blog.functor.request.EntryDeleteClosure;
               
        // dynamically generate an event handler.
        $("#entry-delete-" + obj.code).click(function() {
            deleteClosure.execute({
                code: obj.code
            });
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * set the event handler of entry edit action.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.event.EditEventClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.blog.functor.event.EditEventClosure#execute");
               
        // dynamically generate an event handler.
        $("#entry-edit-" + obj.code).click(function() {
                        
            // get the entry value for from that need to edit.
            $("#entry-title").val(
                $("#entry-title-" + obj.code).text()
            );
            $("#entry-content").val(
                $("#entry-content-" + obj.code).text()
            );
            $("#entry-category").val(
                $("#entry-category-" + obj.code).val()
            );  
            $("#entry-tags").val(
                $("#entry-tags-" + obj.code).val()
            );
            $("#id").val(
                $("#entry-id-" + obj.code).val()
            );
            $("#code").val(
                obj.code
            );
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * build the event handler.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.event.EventBuildClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var editEventClosure = exmp.blog.functor.event.EditEventClosure;
        
        var deleteEventClosure = exmp.blog.functor.event.DeleteEventClosure;
        
        for (var i = 0; i < obj.entryModelList.length; i++) {
            var code = obj.entryModelList[i].code;
            
            // set the event handler for edit.
            editEventClosure.execute({
                code: code
            });
            
            // set the event handler for delete.
            deleteEventClosure.execute({
                code: code
            });
        }
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * this class is a transformer that JSON data get by
 * Ajax HTTP requests and convert to HTML tables.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.htmltag.EntryListTransformer = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    transform: function(obj) {
        console.log("exmp.blog.functor.htmltag.EntryListTransformer#transform");
                
        // dynamically generate an html table.
        var table = "<table class='entry-list-table'>";
        for (var i = 0; i < obj.entryModelList.length; i++) {
            
            // get the value
            var id = obj.entryModelList[i].id;  
            var code = obj.entryModelList[i].code;  
            var title = $.erasureHTML(
                obj.entryModelList[i].title
            );
            var content = $.erasureHTML(
                obj.entryModelList[i].content
            );
            var category = $.erasureHTML(
                obj.entryModelList[i].category
            );
            var tags = $.erasureHTML(
                obj.entryModelList[i].tags
            );
            var permalinkUrl = obj.entryModelList[i].permalinkUrl;
            
            // create an html tag and set the entry code.
            table +=
                "<tr>" +
                    "<td class='entry-icon-td'>" + 
                        "<div class='entry-icon'></div>" +
                    "</td>" +
                    "<td class='entry-list-td' >" +
                        "<a href='" + permalinkUrl + "'>" + 
                            "<span id='entry-title-" + code + "'>" + title + "</span>" + 
                        "</a>" + " " +
                        "<span id='entry-content-" + code + "'>" + content + "</span>" +
                        "<input id='entry-id-" + code + "' type='hidden' value='" + id + "' />" +
                        "<input id='entry-category-" + code + "' type='hidden' value='" + category + "' />" +
                        "<input id='entry-tags-" + code + "' type='hidden' value='" + tags + "' />" +
                    "</td>" +
                    "<td class='entry-action-td'>" +
                        "<table>" + 
                            "<tr>" +
                                "<td>" + 
                                    "<div id='entry-edit-" + code + "'" + " class='entry-action'>e</div>" + 
                                 "</td>" +
                            "</tr>" +
                            "<tr>" + 
                                "<td>" + 
                                    "<div id='entry-delete-" + code + "'" + " class='entry-action'>d</div>" + 
                                 "</td>" +
                            "</tr>" +
                        "</table>" +
                    "</td>" +
                "</tr>";
        }
        table += "</table>";
        return table;
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for the entry delete.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.request.EntryDeleteClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        console.log("exmp.blog.functor.request.EntryDeleteClosure#execute");
        
        var waitingMessageClosure = exmp.blog.functor.dhtml.WaitingMessageClosure;
        
        var successMessageClosure = exmp.blog.functor.dhtml.SuccessMessageClosure;
        
        var errorMessageClosure = exmp.blog.functor.dhtml.ErrorMessageClosure;
        
        var entryListUpdateClosure = exmp.blog.functor.dhtml.EntryListUpdateClosure;
        
        var eventBuildClosure = exmp.blog.functor.event.EventBuildClosure;
        
        // show the waiting message.
        waitingMessageClosure.execute({
            message: "please wait..."
        });
        
        // create an ajax object.
        new $.ajax({
            url: "delete.html",
            type: "POST",
            data: {
                code: obj.code
            },
            dataType: "json",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    // show the error message.
                    errorMessageClosure.execute({
                        message: "application error occurred.."
                    });
                    return;
                }
                
                // update the HTML table of the entry list.
                entryListUpdateClosure.execute(
                    data
                );
                    
                // build the event of the entry list.
                eventBuildClosure.execute(
                    data
                );
                
                // show the success message.
                successMessageClosure.execute({
                    message: "complete."
                });
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                
                // show the error message.
                errorMessageClosure.execute({
                    message: "httprequest error occurred.."
                });
            }
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for get the entry list.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.request.EntryListClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var listWaitingClosure = exmp.blog.functor.dhtml.ListWaitingClosure;
        
        var errorMessageClosure = exmp.blog.functor.dhtml.ErrorMessageClosure;
        
        var entryListUpdateClosure = exmp.blog.functor.dhtml.EntryListUpdateClosure;
        
        var eventBuildClosure = exmp.blog.functor.event.EventBuildClosure;
        
        // show the waiting message.
        listWaitingClosure.execute(
            null
        );
            
        // create an ajax object.
        new $.ajax({
            url: "list.html",
            type: "POST",
            data: obj,
            dataType: "json",
            contentType: "application/json;charset=UTF-8",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    // show the error message.
                    errorMessageClosure.execute({
                        message: "application error occurred.."
                    });
                    $("#entry-list-block").html("");
                    return;
                }
                
                // update the HTML table of the entry list.
                entryListUpdateClosure.execute(
                    data
                );
                
                // build the event of the entry list.
                eventBuildClosure.execute(
                    data
                );
            
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                
                // show the error message.
                errorMessageClosure.execute({
                    message: "httprequest error occurred.."
                });
                $("#entry-list-block").html("");
            }
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for the entry post.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.request.EntryPostClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var waitingMessageClosure = exmp.blog.functor.dhtml.WaitingMessageClosure;
        
        var successMessageClosure = exmp.blog.functor.dhtml.SuccessMessageClosure;
        
        var errorMessageClosure = exmp.blog.functor.dhtml.ErrorMessageClosure;
        
        var entryListUpdateClosure = exmp.blog.functor.dhtml.EntryListUpdateClosure;
        
        var eventBuildClosure = exmp.blog.functor.event.EventBuildClosure;
        
        // show the waiting message.
        waitingMessageClosure.execute({
            message: "please wait..."
        });
        
        // create an ajax object.
        new $.ajax({
            url: "post.html",
            type: "POST",
            data: obj,
            dataType: "json",
            contentType: "application/json;charset=UTF-8",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    // show the error message.
                    errorMessageClosure.execute({
                        message: "application error occurred.."
                    });
                    return;
                }
                
                // update the HTML table of the entry list.
                entryListUpdateClosure.execute(
                    data
                );
                    
                // build the event of the entry list.
                eventBuildClosure.execute(
                    data
                );
                
                // clear the input.
                $("#id").val("");
                $("#code").val("");
                $("#entry-title").val("");
                $("#entry-content").val("");
                $("#entry-category").val(0);
                $("#entry-tags").val("");
                
                // show the success message.
                successMessageClosure.execute({
                    message: "complete."
                });
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                
                // show the error message.
                errorMessageClosure.execute({
                    message: "httprequest error occurred.."
                });
            }
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * send HTTP request for the setting.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.request.SettingClosure = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    execute: function(obj) {
        
        var waitingMessageClosure = exmp.blog.functor.dhtml.WaitingMessageClosure;
        
        var successMessageClosure = exmp.blog.functor.dhtml.SuccessMessageClosure;
        
        var errorMessageClosure = exmp.blog.functor.dhtml.ErrorMessageClosure;
        
        // show the waiting message.
        waitingMessageClosure.execute({
            message: "please wait..."
        });
        
        // create an ajax object.
        new $.ajax({
            url: "setting.html",
            type: "POST",
            data: obj,
            dataType: "json",
            contentType: "application/json;charset=UTF-8",
            
            // callback function of the success.
            success: function(data, dataType) {
                
                // if get a error from the response.
                if (data.isError) {
                    // show the error message.
                    errorMessageClosure.execute({
                        message: "application error occurred.."
                    });
                    return;
                }
            },
            
            // callback function of the error.
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                
                // ** success in this class method. **
                // because, this ajax requests are redirected as normal.
                if (XMLHttpRequest.status == 200) {
                    // show the success message.
                    successMessageClosure.execute({
                        message: "complete."
                    });
                    return;
                }
                
                // show the error message.
                errorMessageClosure.execute({
                    message: "httprequest error occurred.."
                });
            }
        });
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * a functor class of the application.
 * get the value from the HTML form and 
 * create a JSON object for HTTP POST.
 * 
 * @author hiroxpepe
 */
exmp.blog.functor.value.EntryFactory = {
    
    ///////////////////////////////////////////////////////////////////////////
    // public methods
    
    create: function() {
        // convert the form data to JSON.
        var param = {};
        $($("#entry-form").serializeArray()).each(
            function(i, v) {
                param[v.name] = v.value;
            }
        );
        return $.toJSON(param);
    }
}

/* 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

///////////////////////////////////////////////////////////////////////////////
/**
 * called the main entry.
 * 
 * @author hiroxpepe
 */
new exmp.blog.core.Application(
    this
);

